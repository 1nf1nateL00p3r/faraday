#-*- coding: utf8 -*-
"""Tests for many API endpoints that do not depend on workspace_name"""

import pytest

from server.api.modules.vulns import VulnerabilityView
from test_cases import factories
from test_api_workspaced_base import ListTestsMixin, API_PREFIX, GenericAPITest
from server.models import (
    Vulnerability,
    VulnerabilityWeb,
    Workspace,
)
from server.api.modules.commandsrun import CommandView
from server.api.modules.workspaces import WorkspaceView


@pytest.mark.usefixtures('logged_user')
class TestListVulnerabilityView(GenericAPITest):
    model = Vulnerability
    factory = factories.VulnerabilityFactory
    api_endpoint = 'vulns'
    #unique_fields = ['ip']
    #update_fields = ['ip', 'description', 'os']
    view_class = VulnerabilityView

    def test_(self, test_client, second_workspace, session):
        self.factory.create(workspace=second_workspace)
        session.commit()
        res = test_client.get(self.url())
        assert res.status_code == 200
        assert 'vulnerabilities' in res.json
        for vuln in res.json['vulnerabilities']:
            assert set([u'id', u'key', u'value']) == set(vuln.keys())
            object_properties = [
                u'status',
                u'website',
                u'issuetracker',
                u'description',
                u'parent',
                u'tags',
                u'severity',
                u'_rev',
                u'easeofresolution',
                u'owned',
                u'hostnames',
                u'pname',
                u'query',
                u'owner',
                u'path',
                u'data',
                u'response',
                u'refs',
                u'desc',
                u'impact',
                u'confirmed',
                u'name',
                u'service',
                u'obj_id',
                u'type',
                u'policyviolations',
                u'request',
                u'_attachments',
                u'params',
                u'target',
                u'_id',
                u'resolution',
                u'method',
                u'metadata'
            ]
            assert set(object_properties) == set(vuln['value'].keys())

    def test_handles_vuln_with_no_creator(self,
                                          workspace,
                                          test_client,
                                          vulnerability_factory,
                                          session):
        # This can happen when a user is deleted but its objects persist
        vuln = vulnerability_factory.create(workspace=workspace, creator=None)
        session.commit()
        res = test_client.get(self.url(vuln))
        assert res.status_code == 200
        assert res.json['owner'] is None
