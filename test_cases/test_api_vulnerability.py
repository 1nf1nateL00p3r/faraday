#-*- coding: utf8 -*-
'''Tests for many API endpoints that do not depend on workspace_name'''

import pytest

from server.api.modules.vulns import VulnerabilityView
from test_cases import factories
from test_api_workspaced_base import ListTestsMixin, API_PREFIX, GenericAPITest
from server.models import (
    Vulnerability,
    VulnerabilityWeb,
    Workspace,
)
from server.api.modules.commandsrun import CommandView
from server.api.modules.workspaces import WorkspaceView


@pytest.mark.usefixtures('logged_user')
class TestListVulnerabilityView(GenericAPITest):
    model = Vulnerability
    factory = factories.VulnerabilityFactory
    api_endpoint = 'vulns'
    #unique_fields = ['ip']
    #update_fields = ['ip', 'description', 'os']
    view_class = VulnerabilityView

    def test_backward_json_compatibility(self, test_client, second_workspace, session):
        self.factory.create(workspace=second_workspace)
        session.commit()
        res = test_client.get(self.url())
        assert res.status_code == 200
        assert 'vulnerabilities' in res.json
        for vuln in res.json['vulnerabilities']:
            assert set([u'id', u'key', u'value']) == set(vuln.keys())
            object_properties = [
                u'status',
                u'website',
                u'issuetracker',
                u'description',
                u'parent',
                u'tags',
                u'severity',
                u'_rev',
                u'easeofresolution',
                u'owned',
                u'hostnames',
                u'pname',
                u'query',
                u'owner',
                u'path',
                u'data',
                u'response',
                u'refs',
                u'desc',
                u'impact',
                u'confirmed',
                u'name',
                u'service',
                u'obj_id',
                u'type',
                u'policyviolations',
                u'request',
                u'_attachments',
                u'params',
                u'target',
                u'_id',
                u'resolution',
                u'method',
                u'metadata'
            ]
            expected = set(object_properties)
            result = set(vuln['value'].keys())
            assert expected <= result

    def test_handles_vuln_with_no_creator(self,
                                          workspace,
                                          test_client,
                                          session):
        # This can happen when a user is deleted but its objects persist
        vuln = self.factory.create(workspace=workspace, creator=None)
        session.commit()
        res = test_client.get(self.url(vuln))
        assert res.status_code == 200
        assert res.json['owner'] is None

    def test_shows_policy_violations(self, workspace, test_client, session,
                                     policy_violation_factory):
        pvs = policy_violation_factory.create_batch(
            5, workspace=workspace, vulnerability=self.first_object)
        session.commit()
        res = test_client.get(self.url(self.first_object))
        assert res.status_code == 200
        assert len(res.json['policyviolations']) == 5
        assert set(res.json['policyviolations']) == {pv.name for pv in pvs}

    def test_shows_refs(self, workspace, test_client, session,
                        reference_factory):
        refs = reference_factory.create_batch(
            5, workspace=workspace, vulnerability=self.first_object)
        session.commit()
        res = test_client.get(self.url(self.first_object))
        assert res.status_code == 200
        assert len(res.json['refs']) == 5
        assert set(res.json['refs']) == {ref.name for ref in refs}

    def test_hostnames(self, host_with_hostnames, test_client, session):
        vuln = self.factory.create(host=host_with_hostnames,
                                   service=None,
                                   workspace=host_with_hostnames.workspace)
        session.commit()
        res = test_client.get(self.url(vuln))
        assert res.status_code == 200
        assert isinstance(res.json['hostnames'], list)
        assert set(res.json['hostnames']) == set(hostname.name for hostname in
                                                 host_with_hostnames.hostnames)

    def _create_post_data(self, name, vuln_type, parent_id, parent_type, refs, policyviolations):
        return {'metadata': {'update_time': 1508254070.211, 'update_user': '', 'update_action': 0, 'creator': 'UI Web',
                             'create_time': 1508254070.211, 'update_controller_action': 'UI Web New', 'owner': ''},
                'obj_id': '5a60af7f01dde6d3acfa8e9d3bef265c361a49d2',
                'owner': '',
                'parent': parent_id,
                'parent_type': parent_type,
                'type': vuln_type,
                'ws': 'airbnb',
                'confirmed': True,
                'data': '',
                'desc': 'fsdfsd',
                'easeofresolution': '',
                'impact': {'accountability': False, 'availability': False, 'confidentiality': False,
                           'integrity': False},
                'name': name,
                'owned': False,
                'policyviolations': policyviolations,
                'refs': refs,
                'resolution': '',
                'severity': 'high',
                'status': 'opened',
                '_attachments': {},
                'description': '',
                'protocol': '',
                'version': ''}

    def test_create_vuln(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=[],
            policyviolations=[]
        )
        ws_name = host_with_hostnames.workspace.name
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert res.json['name'] == 'New vulns'
        assert res.json['type'] == 'Vulnerability'
        assert res.json['parent'] == host_with_hostnames.id
        assert res.json['parent_type'] == 'Host'
