#-*- coding: utf8 -*-
'''Tests for many API endpoints that do not depend on workspace_name'''
import os
from base64 import b64encode

import pytest

from server.api.modules.vulns import VulnerabilityView
from test_cases import factories
from test_api_workspaced_base import (
    API_PREFIX,
    ListTestsMixin,
    ReadOnlyAPITests
)
from server.models import (
    Vulnerability,
    VulnerabilityWeb,
    Reference, PolicyViolation)
from test_cases.factories import ServiceFactory

CURRENT_PATH = os.path.dirname(os.path.abspath(__file__))


@pytest.mark.usefixtures('logged_user')
class TestListVulnerabilityView(ReadOnlyAPITests):
    model = Vulnerability
    factory = factories.VulnerabilityFactory
    api_endpoint = 'vulns'
    #unique_fields = ['ip']
    #update_fields = ['ip', 'description', 'os']
    view_class = VulnerabilityView

    def test_backward_json_compatibility(self, test_client, second_workspace, session):
        self.factory.create(workspace=second_workspace)
        session.commit()
        res = test_client.get(self.url())
        assert res.status_code == 200
        assert 'vulnerabilities' in res.json
        for vuln in res.json['vulnerabilities']:
            assert set([u'id', u'key', u'value']) == set(vuln.keys())
            object_properties = [
                u'status',
                u'issuetracker',
                u'description',
                u'parent',
                u'tags',
                u'severity',
                u'_rev',
                u'easeofresolution',
                u'owned',
                u'hostnames',
                u'pname',
                u'query',
                u'owner',
                u'path',
                u'data',
                u'response',
                u'refs',
                u'desc',
                u'impact',
                u'confirmed',
                u'name',
                u'service',
                u'obj_id',
                u'type',
                u'policyviolations',
                u'request',
                u'_attachments',
                u'target',
                u'_id',
                u'resolution',
                u'method',
                u'metadata',
                u'website',
                u'params',
            ]
            expected = set(object_properties)
            result = set(vuln['value'].keys())
            assert expected - result == set()

    def test_handles_vuln_with_no_creator(self,
                                          workspace,
                                          test_client,
                                          session):
        # This can happen when a user is deleted but its objects persist
        vuln = self.factory.create(workspace=workspace, creator=None)
        session.commit()
        res = test_client.get(self.url(vuln))
        assert res.status_code == 200
        assert res.json['owner'] is None

    def test_shows_policy_violations(self, workspace, test_client, session,
                                     policy_violation_factory):
        pvs = policy_violation_factory.create_batch(
            5, workspace=workspace)
        for pv in pvs:
            self.first_object.policy_violations.append(pv)
        session.commit()
        res = test_client.get(self.url(self.first_object))
        assert res.status_code == 200
        assert len(res.json['policyviolations']) == 5
        assert set(res.json['policyviolations']) == {pv.name for pv in pvs}

    def test_shows_refs(self, workspace, test_client, session,
                        reference_factory):
        refs = reference_factory.create_batch(
            5, workspace=workspace)
        for ref in refs:
            self.first_object.reference_instances.add(ref)
        session.commit()
        res = test_client.get(self.url(self.first_object))
        assert res.status_code == 200
        assert len(res.json['refs']) == 5
        assert set(res.json['refs']) == {ref.name for ref in refs}

    def test_hostnames(self, host_with_hostnames, test_client, session):
        vuln = self.factory.create(host=host_with_hostnames,
                                   service=None,
                                   workspace=host_with_hostnames.workspace)
        session.commit()
        res = test_client.get(self.url(vuln))
        assert res.status_code == 200
        assert isinstance(res.json['hostnames'], list)
        assert set(res.json['hostnames']) == set(hostname.name for hostname in
                                                 host_with_hostnames.hostnames)

    def _create_post_data_vulnerability(self, name, vuln_type, parent_id,
                                        parent_type, refs, policyviolations,
                                        attachments=None, impact=None):
        if not impact:
            impact = {'accountability': False, 'availability': False, 'confidentiality': False,
                           'integrity': False}
        data = {'metadata': {'update_time': 1508254070.211, 'update_user': '', 'update_action': 0, 'creator': 'UI Web',
                             'create_time': 1508254070.211, 'update_controller_action': 'UI Web New', 'owner': ''},
                'obj_id': '5a60af7f01dde6d3acfa8e9d3bef265c361a49d2',
                'owner': '',
                'parent': parent_id,
                'parent_type': parent_type,
                'type': vuln_type,
                'ws': 'airbnb',
                'confirmed': True,
                'data': '',
                'desc': 'fsdfsd',
                'easeofresolution': '',
                'impact': impact,
                'name': name,
                'owned': False,
                'policyviolations': policyviolations,
                'refs': refs,
                'resolution': '',
                'severity': 'high',
                'status': 'opened',
                '_attachments': {},
                'description': '',
                'protocol': '',
                'version': ''}

        if vuln_type == 'VulnerabilityWeb':
            data.update({
                "method": "GET",
                "params": "pepe",
                "path": "/pepep",
                "pname": "pepe",
                "query": "queue&dfsa",
                "request": "",
                "response": "",
                "website": "www.pepe.com"})

        if attachments:
            data['_attachments'] = {}
            for attachment in attachments:
                 data['_attachments'][attachment.name] = {
                     "content_type": "application/x-shellscript",
                     "data": b64encode(attachment.read())
                 }

        return data

    def test_create_vuln(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=[],
            policyviolations=[]
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert vuln_count_previous + 1 == session.query(Vulnerability).count()
        assert res.json['name'] == 'New vulns'
        assert res.json['type'] == 'Vulnerability'
        assert res.json['parent'] == host_with_hostnames.id
        assert res.json['parent_type'] == 'Host'

    def test_create_vuln_web(self, host_with_hostnames, test_client, session):
        service = ServiceFactory.create(host=host_with_hostnames)
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='VulnerabilityWeb',
            parent_id=service.id,
            parent_type='Service',
            refs=[],
            policyviolations=[]
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        vuln_web_count_previous = session.query(VulnerabilityWeb).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert vuln_web_count_previous + 1 == session.query(VulnerabilityWeb).count()
        assert vuln_count_previous  == session.query(Vulnerability).count()
        assert res.json['name'] == 'New vulns'
        assert res.json['type'] == 'VulnerabilityWeb'
        assert res.json['parent'] == service.id
        assert res.json['parent_type'] == 'Service'
        assert res.json['method'] == 'GET'
        assert res.json['path'] == '/pepep'

    @pytest.mark.usefixtures('mock_envelope_list')
    def test_filter_by_severity(self, test_client, session,
                                second_workspace,
                                vulnerability_factory,
                                vulnerability_web_factory,
                                ):
        expected_ids = set()

        high_vulns = vulnerability_factory.create_batch(
            5, workspace=second_workspace, severity='high')
        high_vulns_web = vulnerability_web_factory.create_batch(
            5, workspace=second_workspace, severity='high')
        session.commit()

        expected_ids.update(vuln.id for vuln in high_vulns)
        expected_ids.update(vuln.id for vuln in high_vulns_web)

        vulnerability_factory.create_batch(
            5, workspace=second_workspace, severity='medium')
        vulnerability_web_factory.create_batch(
            5, workspace=second_workspace, severity='medium')

        res = test_client.get(self.url(
            workspace=second_workspace) + '?severity=high')
        assert res.status_code == 200
        for vuln in res.json['data']:
            assert vuln['severity'] == 'high'
        assert set(vuln['_id'] for vuln in res.json['data']) == expected_ids

        # This shouldn't show any vulns since by default severity filter is
        # exact
        res = test_client.get(self.url(
            workspace=second_workspace) + '?severity=h%25')
        assert res.status_code == 200
        assert len(res.json['data']) == 0

    @pytest.mark.usefixtures('mock_envelope_list')
    def test_filter_by_website(self, test_client, session,
                               second_workspace,
                               vulnerability_factory,
                               vulnerability_web_factory,
                               ):

        # Vulns that shouldn't be shown
        vulnerability_factory.create_batch(5, workspace=second_workspace)
        vulnerability_web_factory.create_batch(
            5, workspace=second_workspace, website='other.com')

        # Vulns that must be shown
        expected_vulns = vulnerability_web_factory.create_batch(
            5, workspace=second_workspace, website='faradaysec.com')
        session.commit()
        expected_ids = {vuln.id for vuln in expected_vulns}

        res = test_client.get(self.url(
            workspace=second_workspace) + '?website=faradaysec.com')
        assert res.status_code == 200

        for vuln in res.json['data']:
            assert vuln['website'] == 'faradaysec.com'
        assert set(vuln['_id'] for vuln in res.json['data']) == expected_ids

    def test_create_vuln_with_evidence(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        attachments = [
            open(os.path.join(CURRENT_PATH, 'data', 'faraday.png'), 'r'),
            open(os.path.join(CURRENT_PATH, 'data', 'test.html'), 'r')
        ]
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=[],
            policyviolations=[],
            attachments=attachments,
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)

        assert res.status_code == 201
        assert len(res.json['_attachments']) == 2
        assert vuln_count_previous + 1 == session.query(Vulnerability).count()
        map(lambda fileobj: fileobj.close(), attachments)

    def test_create_vuln_with_refs(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=['CVE-2017-0002', 'CVE-2017-0012', 'CVE-2017-0012'],
            policyviolations=[]
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert session.query(Reference).count() == 2
        assert vuln_count_previous + 1 == session.query(Vulnerability).count()

    def test_create_vuln_with_policyviolations(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=[],
            policyviolations=['PCI DSS Credir card not encrypted',
                              'PCI DSS Credir card not encrypted'],
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert session.query(PolicyViolation).count() == 1
        assert vuln_count_previous + 1 == session.query(Vulnerability).count()

    def test_create_vuln_imapct_verification(self, host_with_hostnames, test_client, session):
        session.commit()  # flush host_with_hostnames
        raw_data = self._create_post_data_vulnerability(
            name='New vulns',
            vuln_type='Vulnerability',
            parent_id=host_with_hostnames.id,
            parent_type='Host',
            refs=[],
            policyviolations=[],
            impact={
                'accountability': True,
                'availability': True,
                'confidentiality': True,
                'integrity': True
            }
        )
        ws_name = host_with_hostnames.workspace.name
        vuln_count_previous = session.query(Vulnerability).count()
        res = test_client.post('/v2/ws/{0}/vulns/'.format(ws_name), data=raw_data)
        assert res.status_code == 201
        assert vuln_count_previous + 1 == session.query(Vulnerability).count()
        assert res.json['name'] == 'New vulns'
        assert res.json['impact'] == {u'accountability': True,
                                     u'availability': True,
                                     u'confidentiality': True,
                                     u'integrity': True}
